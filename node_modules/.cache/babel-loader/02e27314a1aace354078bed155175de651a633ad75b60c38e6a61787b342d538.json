{"ast":null,"code":"'use strict';\n\nvar call = require('../internals/function-call');\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar anObject = require('../internals/an-object');\nvar isNullOrUndefined = require('../internals/is-null-or-undefined');\nvar toLength = require('../internals/to-length');\nvar toString = require('../internals/to-string');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar getMethod = require('../internals/get-method');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar regExpExec = require('../internals/regexp-exec-abstract');\n\n// @@match logic\nfixRegExpWellKnownSymbolLogic('match', function (MATCH, nativeMatch, maybeCallNative) {\n  return [\n  // `String.prototype.match` method\n  // https://tc39.es/ecma262/#sec-string.prototype.match\n  function match(regexp) {\n    var O = requireObjectCoercible(this);\n    var matcher = isNullOrUndefined(regexp) ? undefined : getMethod(regexp, MATCH);\n    return matcher ? call(matcher, regexp, O) : new RegExp(regexp)[MATCH](toString(O));\n  },\n  // `RegExp.prototype[@@match]` method\n  // https://tc39.es/ecma262/#sec-regexp.prototype-@@match\n  function (string) {\n    var rx = anObject(this);\n    var S = toString(string);\n    var res = maybeCallNative(nativeMatch, rx, S);\n    if (res.done) return res.value;\n    if (!rx.global) return regExpExec(rx, S);\n    var fullUnicode = rx.unicode;\n    rx.lastIndex = 0;\n    var A = [];\n    var n = 0;\n    var result;\n    while ((result = regExpExec(rx, S)) !== null) {\n      var matchStr = toString(result[0]);\n      A[n] = matchStr;\n      if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n      n++;\n    }\n    return n === 0 ? null : A;\n  }];\n});","map":{"version":3,"names":["call","require","fixRegExpWellKnownSymbolLogic","anObject","isNullOrUndefined","toLength","toString","requireObjectCoercible","getMethod","advanceStringIndex","regExpExec","MATCH","nativeMatch","maybeCallNative","match","regexp","O","matcher","undefined","RegExp","string","rx","S","res","done","value","global","fullUnicode","unicode","lastIndex","A","n","result","matchStr"],"sources":["/home/kashif/Downloads/USB DATA/React Projects/cv maker react/node_modules/core-js/modules/es.string.match.js"],"sourcesContent":["'use strict';\nvar call = require('../internals/function-call');\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar anObject = require('../internals/an-object');\nvar isNullOrUndefined = require('../internals/is-null-or-undefined');\nvar toLength = require('../internals/to-length');\nvar toString = require('../internals/to-string');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar getMethod = require('../internals/get-method');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar regExpExec = require('../internals/regexp-exec-abstract');\n\n// @@match logic\nfixRegExpWellKnownSymbolLogic('match', function (MATCH, nativeMatch, maybeCallNative) {\n  return [\n    // `String.prototype.match` method\n    // https://tc39.es/ecma262/#sec-string.prototype.match\n    function match(regexp) {\n      var O = requireObjectCoercible(this);\n      var matcher = isNullOrUndefined(regexp) ? undefined : getMethod(regexp, MATCH);\n      return matcher ? call(matcher, regexp, O) : new RegExp(regexp)[MATCH](toString(O));\n    },\n    // `RegExp.prototype[@@match]` method\n    // https://tc39.es/ecma262/#sec-regexp.prototype-@@match\n    function (string) {\n      var rx = anObject(this);\n      var S = toString(string);\n      var res = maybeCallNative(nativeMatch, rx, S);\n\n      if (res.done) return res.value;\n\n      if (!rx.global) return regExpExec(rx, S);\n\n      var fullUnicode = rx.unicode;\n      rx.lastIndex = 0;\n      var A = [];\n      var n = 0;\n      var result;\n      while ((result = regExpExec(rx, S)) !== null) {\n        var matchStr = toString(result[0]);\n        A[n] = matchStr;\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n        n++;\n      }\n      return n === 0 ? null : A;\n    }\n  ];\n});\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,IAAI,GAAGC,OAAO,CAAC,4BAA4B,CAAC;AAChD,IAAIC,6BAA6B,GAAGD,OAAO,CAAC,iDAAiD,CAAC;AAC9F,IAAIE,QAAQ,GAAGF,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAIG,iBAAiB,GAAGH,OAAO,CAAC,mCAAmC,CAAC;AACpE,IAAII,QAAQ,GAAGJ,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAIK,QAAQ,GAAGL,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAIM,sBAAsB,GAAGN,OAAO,CAAC,uCAAuC,CAAC;AAC7E,IAAIO,SAAS,GAAGP,OAAO,CAAC,yBAAyB,CAAC;AAClD,IAAIQ,kBAAkB,GAAGR,OAAO,CAAC,mCAAmC,CAAC;AACrE,IAAIS,UAAU,GAAGT,OAAO,CAAC,mCAAmC,CAAC;;AAE7D;AACAC,6BAA6B,CAAC,OAAO,EAAE,UAAUS,KAAK,EAAEC,WAAW,EAAEC,eAAe,EAAE;EACpF,OAAO;EACL;EACA;EACA,SAASC,KAAK,CAACC,MAAM,EAAE;IACrB,IAAIC,CAAC,GAAGT,sBAAsB,CAAC,IAAI,CAAC;IACpC,IAAIU,OAAO,GAAGb,iBAAiB,CAACW,MAAM,CAAC,GAAGG,SAAS,GAAGV,SAAS,CAACO,MAAM,EAAEJ,KAAK,CAAC;IAC9E,OAAOM,OAAO,GAAGjB,IAAI,CAACiB,OAAO,EAAEF,MAAM,EAAEC,CAAC,CAAC,GAAG,IAAIG,MAAM,CAACJ,MAAM,CAAC,CAACJ,KAAK,CAAC,CAACL,QAAQ,CAACU,CAAC,CAAC,CAAC;EACpF,CAAC;EACD;EACA;EACA,UAAUI,MAAM,EAAE;IAChB,IAAIC,EAAE,GAAGlB,QAAQ,CAAC,IAAI,CAAC;IACvB,IAAImB,CAAC,GAAGhB,QAAQ,CAACc,MAAM,CAAC;IACxB,IAAIG,GAAG,GAAGV,eAAe,CAACD,WAAW,EAAES,EAAE,EAAEC,CAAC,CAAC;IAE7C,IAAIC,GAAG,CAACC,IAAI,EAAE,OAAOD,GAAG,CAACE,KAAK;IAE9B,IAAI,CAACJ,EAAE,CAACK,MAAM,EAAE,OAAOhB,UAAU,CAACW,EAAE,EAAEC,CAAC,CAAC;IAExC,IAAIK,WAAW,GAAGN,EAAE,CAACO,OAAO;IAC5BP,EAAE,CAACQ,SAAS,GAAG,CAAC;IAChB,IAAIC,CAAC,GAAG,EAAE;IACV,IAAIC,CAAC,GAAG,CAAC;IACT,IAAIC,MAAM;IACV,OAAO,CAACA,MAAM,GAAGtB,UAAU,CAACW,EAAE,EAAEC,CAAC,CAAC,MAAM,IAAI,EAAE;MAC5C,IAAIW,QAAQ,GAAG3B,QAAQ,CAAC0B,MAAM,CAAC,CAAC,CAAC,CAAC;MAClCF,CAAC,CAACC,CAAC,CAAC,GAAGE,QAAQ;MACf,IAAIA,QAAQ,KAAK,EAAE,EAAEZ,EAAE,CAACQ,SAAS,GAAGpB,kBAAkB,CAACa,CAAC,EAAEjB,QAAQ,CAACgB,EAAE,CAACQ,SAAS,CAAC,EAAEF,WAAW,CAAC;MAC9FI,CAAC,EAAE;IACL;IACA,OAAOA,CAAC,KAAK,CAAC,GAAG,IAAI,GAAGD,CAAC;EAC3B,CAAC,CACF;AACH,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}