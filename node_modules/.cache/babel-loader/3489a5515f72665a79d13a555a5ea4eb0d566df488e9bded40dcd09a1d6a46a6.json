{"ast":null,"code":"// Generated by CoffeeScript 1.12.2\n(function () {\n  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;\n  if (typeof performance !== \"undefined\" && performance !== null && performance.now) {\n    module.exports = function () {\n      return performance.now();\n    };\n  } else if (typeof process !== \"undefined\" && process !== null && process.hrtime) {\n    module.exports = function () {\n      return (getNanoSeconds() - nodeLoadTime) / 1e6;\n    };\n    hrtime = process.hrtime;\n    getNanoSeconds = function () {\n      var hr;\n      hr = hrtime();\n      return hr[0] * 1e9 + hr[1];\n    };\n    moduleLoadTime = getNanoSeconds();\n    upTime = process.uptime() * 1e9;\n    nodeLoadTime = moduleLoadTime - upTime;\n  } else if (Date.now) {\n    module.exports = function () {\n      return Date.now() - loadTime;\n    };\n    loadTime = Date.now();\n  } else {\n    module.exports = function () {\n      return new Date().getTime() - loadTime;\n    };\n    loadTime = new Date().getTime();\n  }\n}).call(this);","map":{"version":3,"mappings":";AAAA;EAAA;EAAA,IAAG,8DAAiBA,WAAW,CAACC,GAAhC;IACEC,MAAM,CAACC,OAAP,GAAiB;aAAGH,WAAW,CAACC,GAAZ;IAAH;GADnB,MAEK,IAAG,sDAAaG,OAAO,CAACC,MAAxB;IACHH,MAAM,CAACC,OAAP,GAAiB;aAAG,CAACG,mBAAmBC,YAApB,IAAoC;IAAvC;IACjBF,SAASD,OAAO,CAACC;IACjBC,iBAAiB;MACf;MAAAE,KAAKH;aACLG,EAAG,GAAH,GAAQ,GAAR,GAAcA,EAAG;IAFF;IAGjBC,iBAAiBH;IACjBI,SAASN,OAAO,CAACO,MAAR,KAAmB;IAC5BJ,eAAeE,iBAAiBC;GAR7B,MASA,IAAGE,IAAI,CAACX,GAAR;IACHC,MAAM,CAACC,OAAP,GAAiB;aAAGS,IAAI,CAACX,GAAL,KAAaY;IAAhB;IACjBA,WAAWD,IAAI,CAACX,GAAL;GAFR;IAIHC,MAAM,CAACC,OAAP,GAAiB;aAAO,UAAM,CAACW,OAAP,EAAJ,GAAuBD;IAA1B;IACjBA,WAAe,UAAM,CAACC,OAAP","names":["performance","now","module","exports","process","hrtime","getNanoSeconds","nodeLoadTime","hr","moduleLoadTime","upTime","uptime","Date","loadTime","getTime"],"sources":["/home/kashif/Downloads/USB DATA/React Projects/cv maker react/node_modules/performance-now/src/performance-now.coffee"],"sourcesContent":["if performance? and performance.now\n  module.exports = -> performance.now()\nelse if process? and process.hrtime\n  module.exports = -> (getNanoSeconds() - nodeLoadTime) / 1e6\n  hrtime = process.hrtime\n  getNanoSeconds = ->\n    hr = hrtime()\n    hr[0] * 1e9 + hr[1]\n  moduleLoadTime = getNanoSeconds()\n  upTime = process.uptime() * 1e9\n  nodeLoadTime = moduleLoadTime - upTime\nelse if Date.now\n  module.exports = -> Date.now() - loadTime\n  loadTime = Date.now()\nelse\n  module.exports = -> new Date().getTime() - loadTime\n  loadTime = new Date().getTime()\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}